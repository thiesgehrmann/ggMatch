#!/usr/bin/env bash

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

configfile=""
threads="10"
sm_params=""
validate=0
action="matchedListToGraph compareToInitial"

function usage() {

  echo "ggMatch - Greedy Gene Matching tool"
  echo ""
  echo "  ggMatch [options] <configFile>"
  echo ""
  echo "Options"
  echo "  -t <int> : Number of threads to use (default: $threads)"
  echo "  -s <str> : Additional parameters for snakemake (default: \"\")"
  echo "  -a <str> : Snakemake action to perform (default \"$action\")"
  echo "  -p : Create a phylogeny. Requires "phylogeny_reference" to be set in configFile".
  echo "  -V : Perform a functional validation of the identified genes. Requires interproscan.sh to be in \$PATH."
  echo "  -v : Ony validate input. Don't run pipeline."
  echo ""
  echo " See code at https://github.com/thiesgehrmann/ggMatch"

}

while getopts ":t:s:pVa:v" opt; do
  case $opt in
    t)
      threads=$OPTARG
      ;;
    s)
      sm_params="$OPTARG"
      ;;
    p)
      action="phylogeny"
      ;;
    a)
      action="$OPTARG"
      ;;
    V)
      action="validate"
      ;;
    v)
      validate=1
      ;;
    \?)
      echo "Invalid option: $OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Missing argument for option $OPTARG"
      exit 1
      ;;
  esac
done


for i in `seq $((OPTIND-1))`; do
  shift
done

configfile="$1"

if [ ! -e "$configfile" ]; then
  echo "Error: configFile missing"
  usage
  exit 1
fi

$SCRIPTDIR/pipeline_components/checkInput.py "$configfile" "$action"

if [ ! $? -eq 0 ]; then
  echo "Aborting"
  exit 1
fi

if [ $validate -eq 1 ]; then
  exit 0
fi



snakemake --nolock --use-conda --snakefile "$SCRIPTDIR/Snakefile" --configfile "$configfile" --cores "$threads" $sm_params $action
